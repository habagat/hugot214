
# C:\Users\Rolan\gitscm\hugot214\parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = 'BF68839DE58F85243A3F2F5C8FBCF592'
    
_lr_action_items = {'$end':([1,2,14,44,],[-2,0,-3,-1,]),'INTN':([4,],[6,]),'ASSIGN':([21,23,],[35,37,]),'PLUS':([15,17,21,22,31,32,33,38,39,40,41,42,45,48,49,],[25,-24,-25,-23,-21,-25,25,-19,-16,-20,-17,-18,-22,25,25,]),'OPENCURLY':([1,14,],[4,-3,]),'MINUS':([4,9,13,15,17,18,19,21,22,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,45,48,49,54,],[-26,18,-5,27,-24,18,18,-25,-23,18,18,18,18,18,-21,-25,27,18,18,-4,18,-19,-16,-20,-17,-18,-22,27,27,-6,]),'OPENPAR':([3,4,9,13,18,19,20,24,25,26,27,28,34,35,36,37,54,],[5,-26,19,-5,19,19,34,19,19,19,19,19,19,19,-4,19,-6,]),'FLOATN':([4,],[11,]),'STRING':([34,],[46,]),'FLOAT':([4,9,13,18,19,24,25,26,27,28,34,35,36,37,54,],[-26,17,-5,17,17,17,17,17,17,17,17,17,-4,17,-6,]),'MOD':([15,17,21,22,31,32,33,38,39,40,41,42,45,48,49,],[26,-24,-25,-23,-21,-25,26,-19,26,-20,26,-18,-22,26,26,]),'END':([15,16,17,21,22,31,32,38,39,40,41,42,45,53,55,56,],[-15,29,-24,-25,-23,-21,-25,-19,-16,-20,-17,-18,-22,-14,-12,-13,]),'STRINGN':([4,],[12,]),'CLOSECURLY':([30,50,],[44,-27,]),'MAIN':([0,],[3,]),'DIV':([15,17,21,22,31,32,33,38,39,40,41,42,45,48,49,],[24,-24,-25,-23,-21,-25,24,-19,24,-20,24,-18,-22,24,24,]),'BOOLN':([4,],[7,]),'CHARN':([4,],[8,]),'MUL':([15,17,21,22,31,32,33,38,39,40,41,42,45,48,49,],[28,-24,-25,-23,-21,-25,28,-19,28,-20,28,-18,-22,28,28,]),'PRINT':([4,9,13,34,36,54,],[-26,20,-5,20,-4,-6,]),'ID':([4,6,7,8,9,10,11,12,13,18,19,24,25,26,27,28,34,35,36,37,54,],[-26,-7,-11,-9,21,23,-8,-10,-5,32,32,32,32,32,32,32,21,32,-4,32,-6,]),'EOL':([17,22,23,31,32,38,39,40,41,42,43,45,48,49,51,52,],[-24,-23,36,-21,-25,-19,-16,-20,-17,-18,50,-22,53,54,55,56,]),'INT':([4,9,13,18,19,24,25,26,27,28,29,34,35,36,37,54,],[-26,22,-5,22,22,22,22,22,22,22,43,22,22,-4,22,-6,]),'CLOSEPAR':([5,15,17,21,22,31,32,33,38,39,40,41,42,45,46,47,53,55,56,],[14,-15,-24,-25,-23,-21,-25,45,-19,-16,-20,-17,-18,-22,51,52,-14,-12,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([4,],[9,]),'type':([4,],[10,]),'endprog':([16,],[30,]),'expression':([9,18,19,24,25,26,27,28,34,35,37,],[15,31,33,38,39,40,41,42,15,48,49,]),'programHeading':([0,],[1,]),'progStart':([0,],[2,]),'statement':([9,34,],[16,47,]),'empty':([4,],[13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> progStart","S'",1,None,None,None),
  ('progStart -> programHeading OPENCURLY decl statement endprog CLOSECURLY','progStart',6,'p_program_start_start','LexerParser.py',200),
  ('progStart -> programHeading','progStart',1,'p_program_start_start','LexerParser.py',201),
  ('programHeading -> MAIN OPENPAR CLOSEPAR','programHeading',3,'p_program_main','LexerParser.py',205),
  ('decl -> type ID EOL','decl',3,'p_program_decl','LexerParser.py',209),
  ('decl -> empty','decl',1,'p_program_decl','LexerParser.py',210),
  ('decl -> type ID ASSIGN expression EOL','decl',5,'p_program_decl_value','LexerParser.py',215),
  ('type -> INTN','type',1,'p_program_type','LexerParser.py',221),
  ('type -> FLOATN','type',1,'p_program_type','LexerParser.py',222),
  ('type -> CHARN','type',1,'p_program_type','LexerParser.py',223),
  ('type -> STRINGN','type',1,'p_program_type','LexerParser.py',224),
  ('type -> BOOLN','type',1,'p_program_type','LexerParser.py',225),
  ('statement -> PRINT OPENPAR STRING CLOSEPAR EOL','statement',5,'p_program_print','LexerParser.py',229),
  ('statement -> PRINT OPENPAR statement CLOSEPAR EOL','statement',5,'p_program_print','LexerParser.py',230),
  ('statement -> ID ASSIGN expression EOL','statement',4,'p_statement_assign','LexerParser.py',234),
  ('statement -> expression','statement',1,'p_statement_expr','LexerParser.py',238),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','LexerParser.py',243),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','LexerParser.py',244),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','LexerParser.py',245),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','LexerParser.py',246),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','LexerParser.py',247),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','LexerParser.py',255),
  ('expression -> OPENPAR expression CLOSEPAR','expression',3,'p_expression_group','LexerParser.py',259),
  ('expression -> INT','expression',1,'p_expression_number','LexerParser.py',264),
  ('expression -> FLOAT','expression',1,'p_expression_number','LexerParser.py',265),
  ('expression -> ID','expression',1,'p_expression_name','LexerParser.py',269),
  ('empty -> <empty>','empty',0,'p_empty','LexerParser.py',278),
  ('endprog -> END INT EOL','endprog',3,'p_program_end','LexerParser.py',283),
]
